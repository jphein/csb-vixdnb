{"version":3,"sources":["logo.png","logo.js","random.js","example.js","fs.js","mobile.js","index.js"],"names":["FireApp","useState","isFire","setIsFire","toggleFire","className","src","logo","alt","onMouseEnter","onMouseLeave","usedIndexes","RandomImage","cloud_name","tag","image","setImage","useEffect","fetchData","fetch","response","json","data","randomIndex","Math","floor","random","resources","length","includes","push","randomImage","myImage","CloudinaryImage","public_id","cloudName","altId","cldImg","getTouches","evt","touches","originalEvent","Example","state","goToSlide","offsetRadius","showNavigation","enableSwipe","config","slow","slides","key","uuidv4","content","map","slide","index","onClick","setState","onChangeInput","e","target","name","parseInt","value","handleTouchStart","firstTouch","xDown","clientX","yDown","clientY","handleTouchMove","xUp","yUp","xDiff","yDiff","abs","handleKeyDown","keyCode","window","addEventListener","this","removeEventListener","style","width","height","margin","onTouchStart","onTouchMove","animationConfig","marginTop","display","justifyContent","Component","FullScreenButton","autoFullscreen","appContainerRef","useRef","requestFullscreen","current","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","ref","position","top","left","padding","backgroundColor","borderRadius","color","border","DefaultApp","PhoneApp","PhoneDetector","props","isPhone","setIsPhone","userAgent","navigator","vendor","test","checkIfPhone","AppWithCallbackAfterRender","console","log","container","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.5f9b0d5d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.1a3d5c1d.png\";","import React, { useState } from \"react\";\nimport logo from \"./logo.png\"; // import your logo image\n\nconst FireApp = () => {\n  const [isFire, setIsFire] = useState(false); // state to control the animation\n\n  // Function to toggle the fire animation\n  const toggleFire = () => {\n    setIsFire(!isFire);\n  };\n\n  return (\n    <>\n      <div className=\"logo-container\">\n        <img\n          src={logo}\n          alt=\"logo\"\n          className={`logo ${isFire ? \"fire\" : \"\"}`} // set the className dynamically based on the isFire state\n          onMouseEnter={toggleFire} // toggle the fire animation when the logo is hovered\n          onMouseLeave={toggleFire} // toggle back to the original state when the cursor leaves the logo\n        />\n      </div>\n    </>\n  );\n};\nexport default FireApp;\n","/*\nThis code is a React component that displays a random image from a set of images stored in a Cloudinary account. \nThe component takes two props as input - cloud_name and tag - which are used to fetch a JSON list of image \nresources from Cloudinary's API. The component uses the useState and useEffect hooks to manage its state and \nfetch the list of image resources whenever the component is rendered.\n\nOnce the list of image resources is fetched, the component generates a random index to pick an image from the list.\nIt then stores the used index in a persistent array called usedIndexes to keep track of which images have already\nbeen displayed. If the array of used indexes fills up and every index has been used, it is emptied out, allowing\nall images to be displayed again. The selected image is displayed using the AdvancedImage component from the\n@cloudinary/react library, which takes a cldImg prop representing the selected image and an alt prop \nrepresenting the image's public ID.\n*/\n\n// import dependencies\nimport React, { useState, useEffect } from \"react\";\nimport { CloudinaryImage } from \"@cloudinary/url-gen\";\nimport { AdvancedImage } from \"@cloudinary/react\";\n\n// Create a persistent array to store used indices\nlet usedIndexes = [];\n\nconst RandomImage = ({ cloud_name, tag }) => {\n  // Declare the state variable `image` and a function `setImage` to update it\n  const [image, setImage] = useState(null);\n\n  // The effect hook is executed when the component is first rendered and after any re-render caused by changes in the state\n  useEffect(() => {\n    const fetchData = async () => {\n      // Fetch the list of images from Cloudinary\n      const response = await fetch(\n        `https://res.cloudinary.com/${cloud_name}/image/list/${tag}.json`\n      );\n      const data = await response.json();\n\n      // Generate a random index from the list of images\n      let randomIndex = Math.floor(Math.random() * data.resources.length);\n\n      // Check if this random index has already been used\n      while (usedIndexes.includes(randomIndex)) {\n        // If the random index has been used, generate a new random index\n        randomIndex = Math.floor(Math.random() * data.resources.length);\n\n        // When the array of used indexes fills up, empty it out\n        if (usedIndexes.length === data.resources.length - 1) {\n          usedIndexes = [];\n        }\n      }\n\n      // Store this new random index in the array of used indexes\n      usedIndexes.push(randomIndex);\n\n      // Set the state with the randomly selected image\n      const randomImage = data.resources[randomIndex];\n      setImage(randomImage);\n    };\n    fetchData();\n  }, [cloud_name, tag]);\n\n  if (image) {\n    // Create a new CloudinaryImage instance with the selected image and cloud name\n    const myImage = new CloudinaryImage(image.public_id, {\n      cloudName: `${cloud_name}`\n    });\n\n    // Set the alt attribute for the image\n    const altId = `${image.public_id}`;\n    return <AdvancedImage cldImg={myImage} alt={altId} />;\n  } else {\n    // Return null while the image is not yet fetched\n    return null;\n  }\n};\n\n// Export the RandomImage component\nexport default RandomImage;\n","/* This is a React component that renders a carousel using the \"react-spring-3d-carousel\" library. The carousel slides are created by an array of objects, where each object contains a unique key generated using \"uuidv4\" and a content component \"RandomImage\". The component tracks the current slide, offset radius, and whether to show the navigation in its state. It also includes touch event handlers to allow for swipe navigation on mobile devices. The component allows for dynamic control over the slide position, offset radius and navigation display, by allowing the user to input values. */\n\nimport React, { Component } from \"react\";\nimport Carousel from \"react-spring-3d-carousel\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { config } from \"react-spring\";\nimport RandomImage from \"./random\";\n\nconst getTouches = (evt) => {\n  return (\n    evt.touches || evt.originalEvent.touches // browser API\n  );\n};\n\nexport default class Example extends Component {\n  state = {\n    goToSlide: 1,\n    offsetRadius: 10,\n    showNavigation: true,\n    enableSwipe: true,\n    config: config.slow\n  };\n\n  slides = [\n    {\n      key: uuidv4(),\n      content: <RandomImage cloud_name=\"dqm00mcjs\" tag=\"carousel\" />\n    },\n    {\n      key: uuidv4(),\n      content: <RandomImage cloud_name=\"dqm00mcjs\" tag=\"carousel\" />\n    },\n    {\n      key: uuidv4(),\n      content: <RandomImage cloud_name=\"dqm00mcjs\" tag=\"carousel\" />\n    },\n    {\n      key: uuidv4(),\n      content: <RandomImage cloud_name=\"dqm00mcjs\" tag=\"carousel\" />\n    },\n    {\n      key: uuidv4(),\n      content: <RandomImage cloud_name=\"dqm00mcjs\" tag=\"carousel\" />\n    },\n    {\n      key: uuidv4(),\n      content: <RandomImage cloud_name=\"dqm00mcjs\" tag=\"carousel\" />\n    },\n    {\n      key: uuidv4(),\n      content: <RandomImage cloud_name=\"dqm00mcjs\" tag=\"carousel\" />\n    },\n    {\n      key: uuidv4(),\n      content: <RandomImage cloud_name=\"dqm00mcjs\" tag=\"carousel\" />\n    }\n  ].map((slide, index) => {\n    return { ...slide, onClick: () => this.setState({ goToSlide: index }) };\n  });\n\n  onChangeInput = (e) => {\n    this.setState({\n      [e.target.name]: parseInt(e.target.value, 10) || 0\n    });\n  };\n\n  handleTouchStart = (evt) => {\n    if (!this.state.enableSwipe) {\n      return;\n    }\n\n    const firstTouch = getTouches(evt)[0];\n    this.setState({\n      ...this.state,\n      xDown: firstTouch.clientX,\n      yDown: firstTouch.clientY\n    });\n  };\n\n  handleTouchMove = (evt) => {\n    if (!this.state.enableSwipe || (!this.state.xDown && !this.state.yDown)) {\n      return;\n    }\n\n    let xUp = evt.touches[0].clientX;\n    let yUp = evt.touches[0].clientY;\n\n    let xDiff = this.state.xDown - xUp;\n    let yDiff = this.state.yDown - yUp;\n    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n      if (xDiff > 0) {\n        /* left swipe */\n        this.setState({\n          goToSlide: this.state.goToSlide + 1,\n          xDown: null,\n          yDown: null\n        });\n      } else {\n        /* right swipe */\n        this.setState({\n          goToSlide: this.state.goToSlide - 1,\n          xDown: null,\n          yDown: null\n        });\n      }\n    }\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  handleKeyDown = (e) => {\n    switch (e.keyCode) {\n      case 37:\n        this.setState({ goToSlide: this.state.goToSlide - 1 });\n        break;\n      case 39:\n        this.setState({ goToSlide: this.state.goToSlide + 1 });\n        break;\n      default:\n        break;\n    }\n  };\n\n  render() {\n    return (\n      <div\n        style={{ width: \"80%\", height: \"500px\", margin: \"0 auto\" }}\n        onTouchStart={this.handleTouchStart}\n        onTouchMove={this.handleTouchMove}\n      >\n        <Carousel\n          slides={this.slides}\n          goToSlide={this.state.goToSlide}\n          offsetRadius={this.state.offsetRadius}\n          showNavigation={this.state.showNavigation}\n          animationConfig={this.state.config}\n        />\n        <div\n          style={{\n            margin: \"0 auto\",\n            marginTop: \"2rem\",\n            width: \"50%\",\n            display: \"flex\",\n            justifyContent: \"space-around\"\n          }}\n        >\n          {/*         <div>\n            <label>Go to slide: </label>\n            <input name=\"goToSlide\" onChange={this.onChangeInput} />\n          </div>\n          <div>\n            <label>Offset Radius: </label>\n            <input name=\"offsetRadius\" onChange={this.onChangeInput} />\n          </div>\n          <div>\n            <label>Show navigation: </label>\n            <input\n              type=\"checkbox\"\n              checked={this.state.showNavigation}\n              name=\"showNavigation\"\n              onChange={(e) => {\n                this.setState({ showNavigation: e.target.checked });\n              }}\n            />\n          </div>\n          <div>\n            <label>Enable swipe: </label>\n            <input\n              type=\"checkbox\"\n              checked={this.state.enableSwipe}\n              name=\"enableSwipe\"\n              onChange={(e) => {\n                this.setState({ enableSwipe: e.target.checked });\n              }}\n            />\n          </div>\n          <div>\n            <button\n              onClick={() => {\n                this.setState({ config: config.gentle });\n              }}\n              disabled={this.state.config === config.gentle}\n            >\n              Gentle Transition\n            </button>\n          </div>\n          <div>\n            <button\n              onClick={() => {\n                this.setState({ config: config.slow });\n              }}\n              disabled={this.state.config === config.slow}\n            >\n              Slow Transition\n            </button>\n          </div>\n          <div>\n            <button\n              onClick={() => {\n                this.setState({ config: config.wobbly });\n              }}\n              disabled={this.state.config === config.wobbly}\n            >\n              Wobbly Transition\n            </button>\n          </div>\n          <div>\n            <button\n              onClick={() => {\n                this.setState({ config: config.stiff });\n              }}\n              disabled={this.state.config === config.stiff}\n            >\n              Stiff Transition\n            </button>\n            </div> */}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { useRef, useEffect } from \"react\";\nimport FireApp from \"./logo\";\nimport Example from \"./example\";\n\nconst FullScreenButton = ({ autoFullscreen }) => {\n  const appContainerRef = useRef(null);\n\n  const requestFullscreen = () => {\n    if (appContainerRef.current.requestFullscreen) {\n      appContainerRef.current.requestFullscreen();\n    } else if (appContainerRef.current.mozRequestFullScreen) {\n      appContainerRef.current.mozRequestFullScreen();\n    } else if (appContainerRef.current.webkitRequestFullscreen) {\n      appContainerRef.current.webkitRequestFullscreen();\n    } else if (appContainerRef.current.msRequestFullscreen) {\n      appContainerRef.current.msRequestFullscreen();\n    }\n  };\n\n  useEffect(() => {\n    if (autoFullscreen) {\n      requestFullscreen();\n    }\n  }, [autoFullscreen]);\n\n  return (\n    <div>\n      <div ref={appContainerRef}>\n        <FireApp />\n        <Example />\n      </div>\n      <div\n        style={{\n          position: \"fixed\",\n          top: \"0%\",\n          left: \"0%\",\n          margin: \"2%\",\n          padding: \"10px\",\n          backgroundColor: \"transparent\",\n          borderRadius: \"5px 0 0 0\"\n        }}\n      >\n        <button\n          onClick={requestFullscreen}\n          style={{\n            color: \"gray\",\n            backgroundColor: \"#303030\",\n            border: \"none\",\n            padding: \"10px\",\n            borderRadius: \"5px\"\n          }}\n        >\n          Fullscreen\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FullScreenButton;\n","import React, { useState, useEffect } from \"react\";\nimport FullScreenButton from \"./fs\";\n\nconst PhoneDetector = (props) => {\n  const [isPhone, setIsPhone] = useState(false);\n\n  useEffect(() => {\n    const checkIfPhone = () => {\n      const userAgent = navigator.userAgent || navigator.vendor;\n      if (/android/i.test(userAgent) || /iPad|iPhone|iPod/.test(userAgent)) {\n        setIsPhone(true);\n      }\n    };\n    checkIfPhone();\n  }, []);\n\n  return <>{isPhone ? <PhoneApp /> : <DefaultApp />}</>;\n};\n\nconst DefaultApp = () => {\n  return (\n    <div className=\"App\">\n      <FullScreenButton />\n    </div>\n  );\n};\n\nconst PhoneApp = () => {\n  return (\n    <div className=\"App\">\n      <FullScreenButton />\n    </div>\n  );\n};\n\nexport default PhoneDetector;\n","import React, { useEffect } from \"react\";\n//import ReactDOM from \"react-dom\";\nimport { createRoot } from \"react-dom/client\";\n\nimport \"./styles.css\";\nimport \"./logo.css\";\nimport PhoneDetector from \"./mobile\";\n\n//function App() {\n//  return <PhoneDetector />;\n//}\n\nfunction AppWithCallbackAfterRender() {\n  useEffect(() => {\n    console.log(\"rendered\");\n  });\n\n  return <PhoneDetector />;\n}\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\nroot.render(<AppWithCallbackAfterRender />);\n\n//const rootElement = document.getElementById(\"root\");\n//ReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}